trigger:
  - develop
  - main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: "Release"

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: backend
        displayName: "Build backend"
        steps:
          - task: NuGetCommand@2
            inputs:
              command: "restore"
              restoreSolution: "**/*.sln"
              feedsToUse: "select"
              vstsFeed: "8b2a4880-f26e-4ef5-b8ed-351d2d463c75"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              configuration: $(buildConfiguration)
              workingDirectory: "$(System.DefaultWorkingDirectory)/backend"

          - task: DotNetCoreCLI@2
            displayName: "Run unit tests"
            inputs:
              command: "test"
              arguments: "--no-build --configuration $(buildConfiguration)"
              publishTestResults: true
              projects: "$(System.DefaultWorkingDirectory)/backend/HFundamentals.Sample.Tests.Unit/HFundamentals.Sample.Tests.Unit.csproj"
              workingDirectory: "$(System.DefaultWorkingDirectory)/backend"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(System.DefaultWorkingDirectory)"
              ArtifactName: "backend"
              publishLocation: "Container"

      - job: frontend
        dependsOn: backend
        displayName: "Build frontend"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "10.x"
            displayName: "Install Node.js"

          - script: npm install
            displayName: "npm install"
            workingDirectory: "$(System.DefaultWorkingDirectory)/frontend/"

          - script: npm run build
            displayName: "build"
            workingDirectory: "$(System.DefaultWorkingDirectory)/frontend/"

          - script: npm run test
            displayName: "test"
            workingDirectory: "$(System.DefaultWorkingDirectory)/frontend/"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(System.DefaultWorkingDirectory)/frontend/dist/"
              ArtifactName: "frontend"
              publishLocation: "Container"

  - stage: release
    displayName: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: deploy_backend_beta
        displayName: "Deploy backend (beta)"
        environment: beta_env_back
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "backend"
                    downloadPath: "$(System.ArtifactsDirectory)"

                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "Visual Studio Enterprise (66617915-b071-43f5-b408-ccfcf9c4ab1e)"
                    appType: "webAppLinux"
                    WebAppName: "$(webappname)"
                    packageForLinux: "$(System.ArtifactsDirectory)/backend/"
                    RuntimeStack: "DOTNETCORE|5.0"

      - deployment: deploy_frontend_beta
        displayName: "Deploy frontend (beta)"
        environment: beta_env
        dependsOn: deploy_backend_beta
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "frontend"
                    downloadPath: "$(System.ArtifactsDirectory)"
                - task: AzureFileCopy@2
                  inputs:
                    SourcePath: "$(System.ArtifactsDirectory)/frontend"
                    azureSubscription: "Visual Studio Enterprise (66617915-b071-43f5-b408-ccfcf9c4ab1e)"
                    Destination: "AzureBlob"
                    storage: "$(betaStorage)"
                    ContainerName: "$web"
